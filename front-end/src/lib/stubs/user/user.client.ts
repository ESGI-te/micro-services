// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "user/user.proto" (package "user", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./user";
import type { MakeAdminResponse } from "./user";
import type { MakeAdminRequest } from "./user";
import type { DeleteResponse } from "./user";
import type { DeleteRequest } from "./user";
import type { UpdatePasswordResponse } from "./user";
import type { UpdatePasswordRequest } from "./user";
import type { UpdateResponse } from "./user";
import type { UpdateRequest } from "./user";
import type { RegisterResponse } from "./user";
import type { RegisterRequest } from "./user";
import type { CheckPasswordResponse } from "./user";
import type { CheckPasswordRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FindResponse } from "./user";
import type { FindRequest } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: Find(user.FindRequest) returns (user.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse>;
    /**
     * @generated from protobuf rpc: CheckPassword(user.CheckPasswordRequest) returns (user.CheckPasswordResponse);
     */
    checkPassword(input: CheckPasswordRequest, options?: RpcOptions): UnaryCall<CheckPasswordRequest, CheckPasswordResponse>;
    /**
     * @generated from protobuf rpc: Register(user.RegisterRequest) returns (user.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse>;
    /**
     * @generated from protobuf rpc: Update(user.UpdateRequest) returns (user.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: UpdatePassword(user.UpdatePasswordRequest) returns (user.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse>;
    /**
     * @generated from protobuf rpc: Delete(user.DeleteRequest) returns (user.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
    /**
     * @generated from protobuf rpc: MakeAdmin(user.MakeAdminRequest) returns (user.MakeAdminResponse);
     */
    makeAdmin(input: MakeAdminRequest, options?: RpcOptions): UnaryCall<MakeAdminRequest, MakeAdminResponse>;
}
/**
 * @generated from protobuf service user.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Find(user.FindRequest) returns (user.FindResponse);
     */
    find(input: FindRequest, options?: RpcOptions): UnaryCall<FindRequest, FindResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindRequest, FindResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckPassword(user.CheckPasswordRequest) returns (user.CheckPasswordResponse);
     */
    checkPassword(input: CheckPasswordRequest, options?: RpcOptions): UnaryCall<CheckPasswordRequest, CheckPasswordResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckPasswordRequest, CheckPasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Register(user.RegisterRequest) returns (user.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(user.UpdateRequest) returns (user.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePassword(user.UpdatePasswordRequest) returns (user.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePasswordRequest, UpdatePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(user.DeleteRequest) returns (user.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MakeAdmin(user.MakeAdminRequest) returns (user.MakeAdminResponse);
     */
    makeAdmin(input: MakeAdminRequest, options?: RpcOptions): UnaryCall<MakeAdminRequest, MakeAdminResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<MakeAdminRequest, MakeAdminResponse>("unary", this._transport, method, opt, input);
    }
}
